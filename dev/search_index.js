var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FactorGraphs","category":"page"},{"location":"#FactorGraphs","page":"Home","title":"FactorGraphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FactorGraphs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FactorGraphs,\n    Base.get_extension(FactorGraphs, :FactorGraphsPlotsExt),\n    ]","category":"page"},{"location":"#FactorGraphs.FactorGraph","page":"Home","title":"FactorGraphs.FactorGraph","text":"FactorGraph{T}\n\nA type representing a factor graph.\n\n\n\n\n\n","category":"type"},{"location":"#FactorGraphs.FactorGraph-Tuple{AbstractMatrix}","page":"Home","title":"FactorGraphs.FactorGraph","text":"FactorGraph(A::AbstractMatrix)\n\nConstruct a FactorGraph from adjacency matrix A with the convention that rows are factors, columns are variables.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.FactorGraphVertex","page":"Home","title":"FactorGraphs.FactorGraphVertex","text":"FactorGraphVertex\n\nA type to represent a vertex in a bipartite graph, to be passed as an argument to neighbors, inedges, outedges, see examples therein. It is recommended to use the variable and factor constructors.\n\n\n\n\n\n","category":"type"},{"location":"#FactorGraphs.RegularFactorGraph","page":"Home","title":"FactorGraphs.RegularFactorGraph","text":"RegularFactorGraph <: AbstractFactorGraph\n\nA type to represent an infinite regular factor graph with fixed factor and variable degree\n\n\n\n\n\n","category":"type"},{"location":"#FactorGraphs.edge_indices-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"FactorGraphs.edge_indices","text":"IndexedGraphs.edge_indices(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the indices of the edges incident on vertex v, with v.\n\nThe output of edge_indices does not allocate and it can be used to index external arrays of properties directly\n\nExamples\n\njulia> using FactorGraphs, Test\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> edgeprops = randn(ne(g));\n\njulia> indices = (idx(e) for e in outedges(g, variable(3)));\n\njulia> indices_noalloc = edge_indices(g, variable(3));\n\njulia> @assert edgeprops[collect(indices)] == edgeprops[indices_noalloc]\n\njulia> @test_throws ArgumentError edgeprops[indices]\nTest Passed\n      Thrown: ArgumentError\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.factor-Tuple{Integer}","page":"Home","title":"FactorGraphs.factor","text":"factor(a::Integer)\n\nWraps index a in a container such that other functions like neighbors, inedges, outedges, knowing that it indices a factor node.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.factors-Tuple{FactorGraph}","page":"Home","title":"FactorGraphs.factors","text":"factors(g::FactorGraph)\n\nReturn a lazy iterator to the indices of factor vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.nfactors-Tuple{FactorGraph}","page":"Home","title":"FactorGraphs.nfactors","text":"nactors(g::FactorGraph)\n\nReturn the number of actors vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.nvariables-Tuple{FactorGraph}","page":"Home","title":"FactorGraphs.nvariables","text":"nvariables(g::FactorGraph)\n\nReturn the number of variables vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.pairwise_interaction_graph-Tuple{Graphs.AbstractGraph}","page":"Home","title":"FactorGraphs.pairwise_interaction_graph","text":"pairwise_interaction_graph(g::IndexedGraph)\n\nConstruct a factor graph whose factors are the pair-wise interactions encoded in g.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.rand_factor_graph-Tuple{Random.AbstractRNG, Integer, Integer, Integer}","page":"Home","title":"FactorGraphs.rand_factor_graph","text":"rand_factor_graph([rng=default_rng()], nvar, nfact, ned)\n\nCreate a factor graph with nvar variables, nfact factors and ned edges taken uniformly at random.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.rand_factor_graph-Tuple{Random.AbstractRNG, Integer, Integer, Real}","page":"Home","title":"FactorGraphs.rand_factor_graph","text":"rand_factor_graph([rng=default_rng()], nvar, nfact, p)\n\nCreate a factor graph with nvar variables, nfact factors and edges taken independently with probability p.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.rand_regular_factor_graph-Tuple{Random.AbstractRNG, Integer, Integer, Integer}","page":"Home","title":"FactorGraphs.rand_regular_factor_graph","text":"rand_regular_factor_graph([rng=default_rng()], nvar, nfact, k)\n\nCreate a factor graph with nvar variables and nfact factors, where all factors have degree k.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.rand_tree_factor_graph-Tuple{Random.AbstractRNG, Integer}","page":"Home","title":"FactorGraphs.rand_tree_factor_graph","text":"rand_tree_factor_graph([rng=default_rng()], n)\n\nCreate a tree factor graph with n vertices in total. The proportion of variables/factors is casual.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.variable-Tuple{Integer}","page":"Home","title":"FactorGraphs.variable","text":"variable(i::Integer)\n\nWraps index i in a container such that other functions like neighbors, inedges, outedges, knowing that it indices a variable node.\n\n\n\n\n\n","category":"method"},{"location":"#FactorGraphs.variables-Tuple{FactorGraph}","page":"Home","title":"FactorGraphs.variables","text":"variables(g::FactorGraph)\n\nReturn a lazy iterator to the indices of variable vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.edges-Tuple{FactorGraph}","page":"Home","title":"Graphs.edges","text":"edges(g::FactorGraph)\n\nReturn a lazy iterator to the edges of g, with the convention that the source is the factor and the destination is the variable\n\njulia> using FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(edges(g))\n5-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 2 => 1 with index 1\n Indexed Edge 1 => 2 with index 2\n Indexed Edge 1 => 3 with index 3\n Indexed Edge 3 => 3 with index 4\n Indexed Edge 3 => 4 with index 5\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.neighbors-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"Graphs.neighbors","text":"IndexedGraphs.neighbors(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the neighbors of vertex v.\n\nExamples\n\njulia> using FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(neighbors(g, variable(3)))\n2-element Vector{Int64}:\n 1\n 3\n\njulia> collect(neighbors(g, factor(2)))\n1-element Vector{Int64}:\n 1\n\n\n\n\n\n","category":"method"},{"location":"#IndexedGraphs.inedges-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"IndexedGraphs.inedges","text":"IndexedGraphs.inedges(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the edges incident on vertex v, with v as the destination.\n\nExamples\n\njulia> using FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(inedges(g, factor(2)))\n1-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 1 => 2 with index 1\n\n\njulia> collect(inedges(g, variable(3)))\n2-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 1 => 3 with index 3\n Indexed Edge 3 => 3 with index 4\n\n\n\n\n\n","category":"method"},{"location":"#IndexedGraphs.outedges-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"IndexedGraphs.outedges","text":"IndexedGraphs.outedges(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the edges incident on vertex v, with v as the source.\n\nExamples\n\njulia> using FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(outedges(g, factor(2)))\n1-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 2 => 1 with index 1\n\njulia> collect(outedges(g, variable(3)))\n2-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 3 => 1 with index 3\n Indexed Edge 3 => 3 with index 4\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.plot-Tuple{FactorGraph}","page":"Home","title":"RecipesBase.plot","text":"plot(g::FactorGraph; kwargs...)\n\nPlot factor graph g with boxes for factor nodes and circles for variable nodes. It is based on GraphRecipes.graphplot.\n\nOptional arguments\n\nshownames: if set to true, displays the index on every node\noptional arguments to graphplot\n\nExamples\n\njulia> using FactorGraphs\n\njulia> using Plots, GraphRecipes\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 1 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 6 edges\n\njulia> plot(g)\n\n\n\n\n\n","category":"method"}]
}
